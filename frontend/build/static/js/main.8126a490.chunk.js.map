{"version":3,"sources":["serviceWorker.js","api/queryLookup.js","components/tweets/create.js","components/tweets/list.js","components/tweets/detail.js","components/accounts/profile.js","components/layout/scroll.js","components/accounts/userTweets.js","components/accounts/usercard.js","components/accounts/userList.js","components/layout/popup.js","components/accounts/profileUpdate.js","index.js","components/tweets/components.js","components/accounts/components.js"],"names":["Boolean","window","location","hostname","match","getCookie","name","cookieValue","document","cookie","cookies","split","i","length","trim","substring","decodeURIComponent","apiGETQuery","key","endpoint","a","url","fetch","res","json","data","apiGETMutate","apiPOSTMutate","payload","csrftoken","config","JSON","stringify","apiPUTMutate","TweetCreate","props","handleTweetCreate","useState","content","setContent","onSubmit","event","preventDefault","alert","className","rows","value","onChange","target","placeholder","maxLength","type","TweetItem","tweet","requestUserId","handleLike","btnClasses","liked_by","includes","parseInt","author","username","onClick","href","id","timestamp","TweetList","tweetList","refetch","useMutation","onSuccess","like_mutate","tweet_id","console","log","tweetListDiv","map","TweetDetail","tweetId","useQuery","status","error_message","UserProfile","handleProfileSidebarLink","userProfile","userProfileRefetch","follow_mutate","handleFollow","isRequestUserProfile","user","followers","first_name","last_name","bio","tweet_count","follower_count","following_count","ScrollComponent","children","UserTweetList","profileUsername","userTweets","UserProfileItem","profile","UserProfileList","userProfileList","profileListDiv","FollowerList","FollowingList","following","PopupMessage","message","bgColor","textColor","style","justifyContent","getElementById","classList","add","UpdateProfile","profileData","setProfileData","update_mutate","mutate_status","mutate_data","useEffect","handleChange","success_message","method","error","TweetListElement","React","createElement","create_mutate","newTweet","dataset","ReactDOM","render","tweetDetailDiv","TweetDetailElement","userProfileDiv","UserProfileElement","toggle","querySelectorAll","forEach","element","remove","navigator","serviceWorker","ready","then","registration","unregister","catch"],"mappings":"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","file":"static/js/main.8126a490.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","function getCookie(name) {\n    let cookieValue = null;\n    if (document.cookie && document.cookie !== '') {\n        const cookies = document.cookie.split(';');\n        for (let i = 0; i < cookies.length; i++) {\n            const cookie = cookies[i].trim();\n            // Does this cookie string begin with the name we want?\n            if (cookie.substring(0, name.length + 1) === (name + '=')) {\n                cookieValue = decodeURIComponent(cookie.substring(name.length + 1));\n                break;\n            }\n        }\n    }\n    return cookieValue;\n}\n\nexport const apiGETQuery = async (key, endpoint) => {\n    const url = `http://127.0.0.1:8000/api/${endpoint}`;\n\n    const res = await fetch(url);\n    const data = await res.json();\n    return data;\n}\n\nexport const apiGETMutate = async ({ endpoint }) => {\n    const url = `http://127.0.0.1:8000/api/${endpoint}`;\n\n    const res = await fetch(url);\n    const data = await res.json();\n    return data;\n}\n\nexport const apiPOSTMutate = async ({ endpoint, payload }) => {\n    const url = `http://127.0.0.1:8000/api/${endpoint}`;\n    const csrftoken = getCookie('csrftoken');\n\n    const config = {\n        'method' : 'POST',\n        'headers' : {\n            'Content-Type' : 'application/json',\n            'X-CSRFToken': csrftoken\n        },\n        'body' : JSON.stringify(payload)\n    }\n    const res = await fetch(url, config);\n    const data = await res.json();\n    return data;\n}\n\nexport const apiPUTMutate = async ({ endpoint, payload }) => {\n    const url = `http://127.0.0.1:8000/api/${endpoint}`;\n    const csrftoken = getCookie('csrftoken');\n\n    const config = {\n        'method' : 'PUT',\n        'headers' : {\n            'Content-Type' : 'application/json',\n            'X-CSRFToken': csrftoken\n        },\n        'body' : JSON.stringify(payload)\n    }\n    const res = await fetch(url, config);\n    const data = await res.json();\n    return data;\n}\n","import React, { useState } from 'react';\n\nexport const TweetCreate = (props) => {\n    const { handleTweetCreate } = props;\n    const [content, setContent] = useState('')\n    \n    const handleSubmit = (event) => {\n        event.preventDefault();\n        if(content.trim().length===0){\n            alert('Tweet cannot be blank')\n        }else{\n            handleTweetCreate(content);\n        }\n        setContent('');\n    }\n\n    return (\n        <form onSubmit={handleSubmit} className=\"mb-4\">\n            <div className=\"tweet-create-div\">\n                <textarea\n                    className=\"form-control input-custom\"\n                    rows=\"3\"\n                    value={content}\n                    onChange={(event) => setContent(event.target.value)}\n                    placeholder=\"Say something...\"\n                    maxLength={255}\n                >    \n                </textarea>\n                <span>\n                    <small>\n                        {255-content.length}\n                    </small>\n                </span>\n            </div>\n            <input className=\"btn-custom\" type=\"submit\" value=\"Tweet\" />\n        </form>\n    )\n}","import React from 'react';\nimport { useMutation } from 'react-query';\n\nimport { apiGETMutate } from '../../api/queryLookup';\n\nconst TweetItem = (props) => {\n    const { tweet, requestUserId, handleLike } = props;\n    const liked = tweet.liked_by.includes(parseInt(requestUserId, 10));\n    \n    let btnClasses = 'text-secondary';\n    if(liked){\n        btnClasses = 'text-highlight';\n    }\n\n    const handleTweetDetailLink = (event) => {\n        event.preventDefault();\n        window.location.href = `/${tweet.id}`\n    }\n\n    return (\n\n        <div className=\"card card-custom\">\n            <div className=\"card-body\">\n                <h6 className=\"card-subtitle mb-2\">\n                    { tweet.author.username }\n                </h6>\n                <div className=\"clickable mb-1\" onClick={handleTweetDetailLink}>\n                    <p className=\"card-text py-2 px-1\">\n                        {tweet.content}\n                    </p>\n                </div>\n\n                <span className={`${btnClasses} mr-2`}>{`${tweet.liked_by.length}`}</span>\n                <span \n                    className={`${btnClasses} h5 mr-2 clickable`} \n                    onClick={() => handleLike(tweet.id) }\n                >\n                    <i className=\"fa fa-thumbs-up\"></i>\n                </span>\n                {/* <span className=\"h5 text-primary clickable\" onClick={handleTweetDetailLink}>                \n                    <i className=\"fa fa-eye\"></i>\n                </span> */}\n                <small className=\"float-right\">\n                    {tweet.timestamp}\n                </small>\n            </div>\n        </div>\n    )\n}\n\n\nexport const TweetList = (props) => {\n    const { tweetList, refetch, requestUserId } = props\n    const [like_mutate] = useMutation(apiGETMutate, {\n        onSuccess : refetch\n    });\n\n    const handleLike = async (tweet_id) => {\n        const endpoint = `tweets/${tweet_id}/like/`;\n        try {\n            await like_mutate({ endpoint });\n        } catch (error) {\n            console.log('tweet like error');\n        }\n    }\n\n    const tweetListDiv = tweetList.map(tweet => (\n        <TweetItem key={tweet.id} tweet={tweet} handleLike={handleLike} requestUserId={requestUserId}/>\n    ))\n    return (\n        <div className=\"\">\n            { tweetListDiv }\n        </div>\n    )\n\n}","import React from 'react';\nimport { useQuery, useMutation } from 'react-query';\n\nimport { apiGETQuery, apiGETMutate } from '../../api/queryLookup';\n\nexport const TweetDetail = (props) => {\n    const { requestUserId, tweetId } = props //get from django\n    const { data: tweet, refetch, status} = useQuery(['tweetItem', `tweets/${tweetId}/`], apiGETQuery);\n    \n    const [like_mutate] = useMutation(apiGETMutate, {\n        onSuccess : refetch\n    });\n\n    const handleLike = async (tweetId) => {\n        const endpoint = `tweets/${tweetId}/like/`;\n        try {\n            await like_mutate({ endpoint });\n        } catch (error) {\n            console.log('tweet like error');\n        }\n    }\n    \n    const handleUserProfileLink = (username) => {\n        window.location.href = `/${username}`\n    }\n    \n    if(status===\"loading\"){\n        return (\n            <div className=\"text-center\">\n                <h1>Loading</h1>\n            </div>\n        )\n    }\n\n    if(status===\"error\"){\n        return (\n            <div className=\"text-center\">\n                <h1>Error. Try Again</h1>\n            </div>\n        )\n    }\n\n    if(status===\"success\"){\n        if(tweet.error_message==='not found'){\n            return (\n                <div className=\"text-center\">\n                    <h1>Error 404 : Not Found</h1>\n                </div>\n            )\n        }\n\n        const liked = tweet.liked_by.includes(parseInt(requestUserId, 10));\n        let btnClasses = 'text-secondary';\n        if(liked){\n            btnClasses = 'text-highlight';\n        }\n        return (\n            <div className=\"card mb-4 card-custom\">\n                <div className=\"card-header px-3 py-1 clickable bg-custom-dark\" onClick={() => handleUserProfileLink(tweet.author.username)}>\n                    <h5>{ tweet.author.username }</h5>\n                </div>\n                <div className=\"card-body\">\n                    <p className=\"card-text\">{tweet.content}</p>\n\n                    <span className={`${btnClasses} mr-2`}>{`${tweet.liked_by.length}`}</span>\n                    <span \n                        className={`${btnClasses} h5 mr-2 clickable`} \n                        onClick={() => handleLike(tweet.id) }\n                    >\n                        <i className=\"fa fa-thumbs-up\"></i>\n                    </span>\n                    <small className=\"float-right\">\n                        {tweet.timestamp}\n                    </small>\n                </div>\n            </div>\n        )\n    }\n}\n","import React from 'react';\nimport { useMutation } from 'react-query';\n\nimport { apiGETMutate } from '../../api/queryLookup';\n\nexport const UserProfile = (props) => {\n    const { handleProfileSidebarLink, userProfile, requestUserId,userProfileRefetch } = props;\n    const [follow_mutate] = useMutation(apiGETMutate, {\n        onSuccess: () => {\n            userProfileRefetch()\n        }\n    })\n\n    const handleFollow = async (username) => {\n        const endpoint = `accounts/${username}/follow/`;\n        await follow_mutate({ endpoint })\n    }\n\n    let btnClasses = 'bg-btn-follow';\n    let value = 'Follow'\n    let isRequestUserProfile = false;\n    if(userProfile.user.id===parseInt(requestUserId, 10)){\n        btnClasses = 'd-none'\n        isRequestUserProfile = true;\n    }else{\n        const followed = userProfile.followers.includes(parseInt(requestUserId, 10));\n        if(followed){\n            btnClasses = 'bg-btn-unfollow';\n            value = 'Unfollow';\n        }\n    }\n\n    return (\n        <div className=\"profile card-custom\">\n            <div className=\"profile-header\">\n                <h4 className=\"mb-1\">\n                    {`${userProfile.user.first_name} ${userProfile.user.last_name}`}\n                </h4>\n                <h6 className=\"mb-2\">\n                    {`@${userProfile.user.username}`}\n                </h6>\n                <div>\n                    <button \n                        className={`${btnClasses} btn-custom`}\n                        onClick={() => handleFollow(userProfile.user.username)}\n                    >\n                        {`${value}`}\n                    </button>\n                </div>\n                <p className=\"profile-bio\">\n                    {`${userProfile.bio}`}\n                </p>\n            </div>\n            <div className=\"profile-links\">\n                <ul>\n                    {\n                        isRequestUserProfile &&\n                        <li \n                            id=\"profile-update\" \n                            className=\"clickable\" \n                            onClick={\n                                () => handleProfileSidebarLink('update')\n                            }\n                        >\n                            {`Profile`}\n                        </li>\n                    }\n                    <li \n                        id=\"profile-tweets\" \n                        className=\"active clickable\" \n                        onClick={\n                            () => handleProfileSidebarLink('tweets')\n                        }\n                    >\n                        {`Tweets (${userProfile.tweet_count})`}\n                    </li>\n                    <li \n                        id=\"profile-followers\" \n                        className=\"clickable\" \n                        onClick={\n                            () => handleProfileSidebarLink('followers')\n                        }\n                    >\n                        {`Followers (${userProfile.follower_count})`}\n                    </li>\n                    <li \n                        id=\"profile-following\" \n                        className=\"clickable\" \n                        onClick={\n                            () => handleProfileSidebarLink('following')\n                        }\n                    >                 \n                        {`Following (${userProfile.following_count})`}\n                    </li>\n                </ul>\n            </div>\n        </div>\n    )\n}\n","import React from \"react\";\n\nexport const ScrollComponent = (props) => {\n    return (\n        <div className=\"scroller\">\n            { props.children }\n        </div>\n    )\n}\n","import React from 'react';\nimport { useQuery } from 'react-query';\n\nimport { apiGETQuery } from '../../api/queryLookup'\nimport { TweetList } from '../tweets/list';\n\nexport const UserTweetList = (props) => {\n    const { profileUsername, requestUserId } = props;\n    const {data: userTweets, status, refetch} = useQuery(['userTweetList', `accounts/${profileUsername}/tweets/`], apiGETQuery);\n    \n    if(status===\"loading\"){\n        return (\n            <div className=\"text-center\">\n                <h1>Loading</h1>\n            </div>\n        )\n    }\n\n    if(status===\"error\"){\n        return (\n            <div className=\"text-center\">\n                <h1>Error. Try Again</h1>\n            </div>\n        )\n    }\n\n    if(status===\"success\"){\n\n        if(userTweets.error_message==='not found'){\n            return (\n                <div className=\"text-center\">\n                    <h1>Error 404 : Not Found</h1>\n                </div>\n            )\n        }\n        return (\n            <div>\n                <h1 className=\"mb-4\">{`${profileUsername}'s Tweets`}</h1>\n                <TweetList tweetList={userTweets} refetch={refetch} requestUserId={requestUserId}/>\n            </div>\n        )\n    }\n}","import React from 'react';\nimport { useMutation } from 'react-query';\n\nimport { apiGETMutate } from '../../api/queryLookup';\n\nexport const UserProfileItem = (props) => {\n    const { profile, requestUserId, refetch, userProfileRefetch } = props;\n    const [follow_mutate] = useMutation(apiGETMutate, {\n        onSuccess: () => {\n            refetch()\n            userProfileRefetch()\n        }\n    })\n\n    const handleFollow = async ( username ) => {\n        const endpoint = `accounts/${username}/follow/`;\n        await follow_mutate({ endpoint })\n    }\n\n    const handleUserProfileLink = (username) => {\n        window.location.href = `/${username}`\n    }\n    \n    let btnClasses = 'bg-btn-follow';\n    let value = 'Follow'\n    if(profile.user.id===parseInt(requestUserId, 10)){\n        btnClasses = 'd-none'\n    }else{\n        const followed = profile.followers.includes(parseInt(requestUserId, 10));\n        if(followed){\n            btnClasses = 'bg-btn-unfollow';\n            value = 'Unfollow';\n        }\n    }\n\n    return (\n        <div className=\"profile-card card card-custom\">\n            <div className=\"card-body\">\n                <div className=\"card-info\">\n                    <div>\n                        <h6 className=\"profile-card-fullname\">\n                            {`${profile.user.first_name} ${profile.user.last_name}`}\n                        </h6>\n                        <div className=\"\">\n                            <span className=\"user-link\" onClick={() => handleUserProfileLink(profile.user.username)}>\n                                {`@${profile.user.username}`}\n                            </span>\n                        </div>\n                    </div>\n                    <div>\n                        <button \n                            className={`${btnClasses} btn-custom`}\n                            onClick={() => handleFollow(profile.user.username)}\n                        >\n                            {`${value}`}\n                        </button>\n                    </div>\n                </div>\n                <div className=\"profile-bio\">\n                    {`${profile.bio}`}\n                </div>\n            </div>\n        </div>\n    )\n}\n","import React from 'react';\nimport { useQuery } from 'react-query';\n\nimport { apiGETQuery } from '../../api/queryLookup';\nimport { UserProfileItem } from './usercard';\n\nconst UserProfileList = (props) => {\n    const { userProfileList, requestUserId, refetch, userProfileRefetch } = props;\n    const profileListDiv = userProfileList.map(profile => (\n        <UserProfileItem key={profile.id} profile={profile} requestUserId={requestUserId} refetch={refetch} userProfileRefetch={userProfileRefetch} />\n    ))\n    return (\n        <>\n            { profileListDiv }\n        </>\n    )\n}\n\nexport const FollowerList = (props) => {\n    const { profileUsername, requestUserId, userProfileRefetch } = props;\n    const { data: followers, status, refetch} = useQuery(['followerList', `accounts/${profileUsername}/followers/`], apiGETQuery);\n\n    if(status===\"loading\"){\n        return (\n            <div className=\"text-center\">\n                <h1>Loading</h1>\n            </div>\n        )\n    }\n\n    if(status===\"error\"){\n        return (\n            <div className=\"text-center\">\n                <h1>Error. Try Again</h1>\n            </div>\n        )\n    }\n\n    if(status===\"success\"){\n        if(followers.error_message==='not found'){\n            return (\n                <div className=\"text-center\">\n                    <h1>Error 404 : Not Found</h1>\n                </div>\n            )\n        }\n        return (\n            <div>\n                <h1 className=\"mb-4\">{`${profileUsername}'s Followers`}</h1>\n                <UserProfileList userProfileList={followers} requestUserId={requestUserId} refetch={refetch} userProfileRefetch={userProfileRefetch} />\n            </div>\n        )\n    }\n}\n\n\nexport const FollowingList = (props) => {\n    const { profileUsername, requestUserId, userProfileRefetch } = props;\n    const { data: following, status, refetch} = useQuery(['followingList', `accounts/${profileUsername}/following/`], apiGETQuery);\n\n    if(status===\"loading\"){\n        return (\n            <div className=\"text-center\">\n                <h1>Loading</h1>\n            </div>\n        )\n    }\n\n    if(status===\"error\"){\n        return (\n            <div className=\"text-center\">\n                <h1>Error. Try Again</h1>\n            </div>\n        )\n    }\n\n    if(status===\"success\"){\n        return (\n\n            <div>\n                <h1 className=\"mb-4\">{`${profileUsername}'s Following`}</h1>\n                <UserProfileList userProfileList={following} requestUserId={requestUserId} refetch={refetch} userProfileRefetch={userProfileRefetch} />\n            </div>\n        )\n    }\n}","import React from 'react';\n\nexport const PopupMessage = (props) => {\n    const { message, status } = props;\n    let bgColor = '';\n    let textColor = '';\n    if(status==='success'){\n        bgColor = 'bg-custom-success';\n        textColor = 'text-custom-success';\n    }\n    const hideMessageBox = () => {\n        document.getElementById('popup-message').classList.add('d-none');\n    }\n\n    return (\n        <div id=\"popup-message\" className={`alert col-12 ${bgColor}` } style={{'display' : 'flex', justifyContent : 'space-between'}}>\n            <div>\n                <span className={`${textColor}`}>\n                    { message }\n                </span>\n            </div>\n            <button type=\"button\" className=\"close\" onClick={hideMessageBox}>\n                <span className={`${textColor}`}>&times;</span>\n            </button>\n        </div>\n    )\n} ","import React, { useState, useEffect } from 'react';\nimport { useQuery, useMutation } from 'react-query'\n\nimport { apiGETQuery, apiPUTMutate } from '../../api/queryLookup'\nimport { PopupMessage } from '../layout/popup';\n\nexport const UpdateProfile = (props) => {\n    const { profileUsername, requestUserId, userProfileRefetch} = props;\n    const [profileData, setProfileData] = useState({\n        'bio' : '',\n        'first_name' : '',\n        'last_name' : ''\n    })\n    const {data: profile, status} = useQuery(['userProfile', `accounts/${profileUsername}/update/`], apiGETQuery);\n    const [update_mutate, { status : mutate_status, data : mutate_data }] = useMutation(apiPUTMutate, {\n        onSuccess : (data) => {\n            userProfileRefetch()\n        }\n    });\n\n    useEffect(() => {\n        if(status===\"success\"){\n            setProfileData({\n                'bio' : profile.bio,\n                'first_name' : profile.user.first_name,\n                'last_name' : profile.user.last_name\n            })\n        }\n    }, [profile, status])\n\n    const handleChange = (event) => {\n        event.preventDefault();\n        setProfileData({\n            ...profileData,\n            [event.target.name] : event.target.value\n        })\n    }\n\n    const handleSubmit = (event) => {\n        event.preventDefault();\n        const endpoint = `accounts/${profileUsername}/update/`;\n        const payload = profileData\n        try{\n            update_mutate({endpoint, payload})\n        }catch(error){\n            console.log(error)\n        }\n    }\n    \n    if(status===\"loading\"){\n        return (\n            <div className=\"text-center\">\n                <h1>Loading...</h1>\n            </div>\n        )\n    }\n\n    if(status===\"error\"){\n        return (\n            <div className=\"text-center\">\n                <h1>Error. Try Again</h1>\n            </div>\n        )\n    }\n\n    if(status===\"success\"){\n        if(profile.error_message==='not found'){\n            return (\n                <div className=\"text-center\">\n                    <h1>Error 404 : Not Found</h1>\n                </div>\n            )\n        }\n        return (\n            <div>\n                <h1 className=\"mb-4\">{`Update Profile`}</h1>\n                <div className=\"card-custom form-custom profile-update\">\n                    {\n                        (mutate_status===\"success\") &&\n                        <PopupMessage message={mutate_data.success_message} status=\"success\" />\n                    }\n                    <form method=\"post\" onSubmit={handleSubmit}>\n                        <div className=\"form-group-custom\">\n                            <input \n                                maxLength={128}\n                                name=\"bio\"\n                                type=\"text\" \n                                placeholder=\" \"\n                                value={profileData.bio}\n                                onChange={handleChange}\n                            />\n                            <label className=\"label-custom\">\n                                <span className=\"label-text-custom\">Bio</span>\n                            </label>\n                        </div>\n                        <div className=\"form-group-custom\">\n                            <input \n                                name=\"first_name\"\n                                type=\"text\" \n                                placeholder=\" \"\n                                value={profileData.first_name}\n                                onChange={handleChange}\n                            />\n                            <label className=\"label-custom\">\n                                <span className=\"label-text-custom\">First Name</span>\n                            </label>\n                        </div>\n                        <div className=\"form-group-custom\">\n                            <input \n                                name=\"last_name\"\n                                type=\"text\" \n                                placeholder=\" \"\n                                value={profileData.last_name}\n                                onChange={handleChange}\n                            />\n                            <label className=\"label-custom\">\n                                <span className=\"label-text-custom\">Last Name</span>\n                            </label>\n                        </div>\n                        <div className=\"mt-3\">\n                            <input type=\"submit\" value=\"Save Changes\" className=\"btn-custom\" />\n                        </div>\n                    </form>\n                </div>\n            </div>\n        )\n    }\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n// import App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nimport { TweetListComponent } from './components/tweets/components'\nimport { TweetDetailComponent } from './components/tweets/components';\nimport { UserProfileComponent } from './components/accounts/components';\n// import { PopupMessage } from './components/layout/popup';\n\n// ReactDOM.render(\n// \t<React.StrictMode>\n// \t\t<App />\n// \t</React.StrictMode>,\n// \tdocument.getElementById('root')\n// );\n\nconst tweetListDiv = document.getElementById('tweet-list');\nif(tweetListDiv){\n\tconst TweetListElement = React.createElement(TweetListComponent, tweetListDiv.dataset)\n\tReactDOM.render(TweetListElement, tweetListDiv)\n}\n\nconst tweetDetailDiv = document.getElementById('tweet-detail');\nif(tweetDetailDiv){\n\tconst TweetDetailElement = React.createElement(TweetDetailComponent, tweetDetailDiv.dataset)\n\tReactDOM.render(TweetDetailElement, tweetDetailDiv)\n}\n\nconst userProfileDiv = document.getElementById('user-profile');\nif(userProfileDiv){\n\tconst UserProfileElement = React.createElement(UserProfileComponent, userProfileDiv.dataset)\n\tReactDOM.render(UserProfileElement, userProfileDiv)\n}\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import React from 'react';\nimport { useQuery, useMutation } from 'react-query';\n\nimport { apiGETQuery, apiPOSTMutate } from '../../api/queryLookup';\nimport { TweetCreate } from './create';\nimport { TweetList } from './list';\nimport { TweetDetail } from './detail';\n\nexport const TweetListComponent = (props) => {\n    const { requestUserId } = props;\n    const { data : tweetList, status, refetch } = useQuery(['tweetListState', 'tweets/'], apiGETQuery);\n\n    const [create_mutate] = useMutation(apiPOSTMutate, {\n        onSuccess : refetch\n    });\n\n    const handleTweetCreate = async (content) => {\n        const endpoint = `tweets/create/`;\n        const newTweet = {\n            'content' : content\n        }\n        try {\n            await create_mutate({ endpoint, payload: newTweet })\n        } catch (error) {\n            console.log('tweet create error');\n        }\n    }\n\n\n    if(status===\"loading\"){\n        return (\n            <div className=\"text-center\">\n                <h1>Loading</h1>\n            </div>\n        )\n    }\n\n    if(status===\"error\"){\n        return (\n            <div className=\"text-center\">\n                <h1>Error. Try Again</h1>\n            </div>\n        )\n    }\n\n    if(status===\"success\"){\n        if(tweetList.error_message==='not found'){\n            return (\n                <div className=\"text-center\">\n                    <h1>Error 404 : Not Found</h1>\n                </div>\n            )\n        }\n        return (\n            <div className=\"col-10 col-md-8 col-lg-6 mx-auto\">\n                <>\n                    {/* form to create tweet */}\n                    { \n                        (requestUserId) && \n                        <TweetCreate handleTweetCreate={handleTweetCreate}/>\n                    }\n\n                </>\n                <>\n                    <TweetList tweetList={tweetList} refetch={refetch} {...props}/>\n                </>\n            </div>\n        )\n    }\n}\n\nexport const TweetDetailComponent = (props) => {\n    return (\n        <div className=\"col-10 col-md-8 col-lg-6 mx-auto\">\n            <TweetDetail {...props}/>    \n        </div>\n    )\n}","import React, { useState } from 'react';\n\nimport { useQuery } from 'react-query';\n\nimport { apiGETQuery } from '../../api/queryLookup';\nimport { UserProfile } from './profile';\nimport { ScrollComponent } from '../layout/scroll';\nimport { UserTweetList } from './userTweets';\nimport { FollowerList, FollowingList  } from './userList';\nimport { UpdateProfile } from './profileUpdate'\n\nexport const UserProfileComponent = (props) => {\n    const { profileUsername, requestUserId } = props\n    const {data: userProfile, status, refetch: userProfileRefetch} = useQuery(['userDetailState', `accounts/${profileUsername}/`], apiGETQuery);\n\n    const [content, setContent] = useState('tweets');\n\n    const handleProfileSidebarLink = (value) => {\n        setContent(value);\n        const listElements = document.querySelectorAll('.profile-links ul li');\n        listElements.forEach(element => {\n            element.classList.remove('active')\n        })\n        const element = document.getElementById(`profile-${value}`);\n        element.classList.toggle('active')\n    }\n\n    const toggleProfileComponent = () => {\n        document.getElementById('profile-component').classList.toggle('fixed-div-none')\n    }\n\n    if(status===\"loading\"){\n        return (\n            <div className=\"text-center\">\n                <h1>Loading</h1>\n            </div>\n        )\n    }\n\n    if(status===\"error\"){\n        return (\n            <div className=\"text-center\">\n                <h1>Error. Try Again</h1>\n            </div>\n        )\n    }\n\n    if(status===\"success\"){\n        if(userProfile.error_message==='not found'){\n            return (\n                <div className=\"text-center\">\n                    <h1>Error 404 : Not Found</h1>\n                </div>\n            )\n        }\n        return (\n            <div className=\"container-fluid\">\n                <div className=\"profile-toggle-button\" onClick={toggleProfileComponent}>\n                    <span>\n                        <i className=\"fa fa-user\"></i>\n                    </span>\n                </div>\n                <div className=\"row\">\n                    <div id=\"profile-component\" className=\"fixed-div fixed-div-none\">\n                        <ScrollComponent>\n                            <UserProfile userProfile={userProfile}  handleProfileSidebarLink={handleProfileSidebarLink} requestUserId={requestUserId} userProfileRefetch={userProfileRefetch}/>\n                        </ScrollComponent>\n                    </div>\n                    <div className=\"profile-content-div mt-3\">\n                        <div className=\"profile-content\">\n                            {\n                                content==='update' && userProfile.id===parseInt(requestUserId,10) && \n                                <UpdateProfile profileUsername={profileUsername} requestUserId={requestUserId} userProfileRefetch={userProfileRefetch}/>\n                            }\n\n                            { content==='tweets' && <UserTweetList profileUsername={profileUsername} requestUserId={requestUserId}/> }\n\n                            { content==='followers' && <FollowerList profileUsername={profileUsername} requestUserId={requestUserId} userProfileRefetch={userProfileRefetch} /> }\n                            \n                            { content==='following' && <FollowingList profileUsername={profileUsername} requestUserId={requestUserId} userProfileRefetch={userProfileRefetch} /> }\n                        </div>\n                    </div>\n                </div>\n            </div>\n        )\n    }\n}\n\n// export const TweetDetailComponent = (props) => {\n//     return (\n//         <div className=\"col-12 col-md-5 offset-md-2\">\n//             <TweetDetail {...props}/>    \n//         </div>\n//     )\n// }"],"sourceRoot":""}