{"version":3,"sources":["serviceWorker.js","api/queryLookup.js","components/tweets/create.js","components/tweets/list.js","components/tweets/detail.js","components/accounts/profile.js","components/layout/scroll.js","components/accounts/userTweets.js","components/accounts/usercard.js","components/accounts/userList.js","index.js","components/tweets/components.js","components/accounts/components.js"],"names":["Boolean","window","location","hostname","match","getCookie","name","cookieValue","document","cookie","cookies","split","i","length","trim","substring","decodeURIComponent","apiGETQuery","key","endpoint","a","url","fetch","res","json","data","apiGETMutate","apiPOSTMutate","payload","csrftoken","config","JSON","stringify","TweetCreate","props","handleTweetCreate","useState","content","setContent","onSubmit","event","preventDefault","alert","className","id","rows","value","onChange","target","type","TweetItem","tweet","requestUserId","handleLike","btnClasses","liked_by","includes","parseInt","author","username","onClick","href","timestamp","TweetList","tweetList","refetch","useMutation","onSuccess","like_mutate","tweet_id","console","log","tweetListDiv","map","TweetDetail","tweetId","useQuery","status","error_message","UserProfile","handleProfileSidebarLink","userProfile","userProfileRefetch","follow_mutate","handleFollow","user","followers","first_name","last_name","bio","tweet_count","follower_count","following_count","ScrollComponent","children","UserTweetList","profileUsername","userTweets","UserProfileItem","profile","UserProfileList","userProfileList","profileListDiv","FollowerList","FollowingList","following","getElementById","TweetListElement","React","createElement","create_mutate","newTweet","dataset","ReactDOM","render","tweetDetailDiv","TweetDetailElement","userProfileDiv","UserProfileElement","listItems","forEach","classList","remove","add","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.a1efb517.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","function getCookie(name) {\n    let cookieValue = null;\n    if (document.cookie && document.cookie !== '') {\n        const cookies = document.cookie.split(';');\n        for (let i = 0; i < cookies.length; i++) {\n            const cookie = cookies[i].trim();\n            // Does this cookie string begin with the name we want?\n            if (cookie.substring(0, name.length + 1) === (name + '=')) {\n                cookieValue = decodeURIComponent(cookie.substring(name.length + 1));\n                break;\n            }\n        }\n    }\n    return cookieValue;\n}\n\nexport const apiGETQuery = async (key, endpoint) => {\n    const url = `http://127.0.0.1:8000/api/${endpoint}`;\n\n    const res = await fetch(url);\n    const data = await res.json();\n    return data;\n}\n\nexport const apiGETMutate = async ({ endpoint }) => {\n    const url = `http://127.0.0.1:8000/api/${endpoint}`;\n\n    const res = await fetch(url);\n    const data = await res.json();\n    return data;\n}\n\nexport const apiPOSTMutate = async ({ endpoint, payload }) => {\n    const url = `http://127.0.0.1:8000/api/${endpoint}`;\n    const csrftoken = getCookie('csrftoken');\n\n    const config = {\n        'method' : 'POST',\n        'headers' : {\n            'Content-Type' : 'application/json',\n            'X-CSRFToken': csrftoken\n        },\n        'body' : JSON.stringify(payload)\n    }\n    const res = await fetch(url, config);\n    const data = await res.json();\n    return data;\n}\n","import React, { useState } from 'react';\n\nexport const TweetCreate = (props) => {\n    const { handleTweetCreate } = props;\n    const [content, setContent] = useState('')\n    \n    const handleSubmit = (event) => {\n        event.preventDefault();\n        if(content.trim().length===0){\n            alert('Tweet cannot be blank')\n        }else{\n            handleTweetCreate(content);\n        }\n        setContent('');\n    }\n\n    return (\n        <form onSubmit={handleSubmit}>\n            <div className=\"form-group\">\n                <textarea \n                    name=\"\"\n                    className=\"form-control\" \n                    id=\"\" \n                    rows=\"4\"\n                    value={content}\n                    onChange={(event) => setContent(event.target.value)}\n                >    \n                </textarea>\n            <input className=\"btn btn-primary\" type=\"submit\" value=\"Tweet\" />\n            </div>\n        </form>\n    )\n}","import React from 'react';\nimport { useMutation } from 'react-query';\n\nimport { apiGETMutate } from '../../api/queryLookup';\n\nconst TweetItem = (props) => {\n    const { tweet, requestUserId, handleLike } = props;\n    const liked = tweet.liked_by.includes(parseInt(requestUserId, 10));\n    \n    let btnClasses = 'h5 text-secondary';\n    if(liked){\n        btnClasses = 'h5 text-primary';\n    }\n\n    const handleTweetDetailLink = (event) => {\n        event.preventDefault();\n        window.location.href = `/${tweet.id}`\n    }\n\n    return (\n\n        <div className=\"card mb-4\">\n            <div className=\"card-body\">\n                <h6 className=\"card-subtitle mb-2 text-muted\">\n                    { tweet.author.username }\n                </h6>\n                <div className=\"\">\n                    <p className=\"card-text\">\n                        {tweet.content}\n                    </p>\n                </div>\n\n                <span className=\"mr-2\">{`${tweet.liked_by.length}`}</span>\n                <span \n                    className={`${btnClasses} mr-2 clickable`} \n                    onClick={() => handleLike(tweet.id) }\n                >\n                    <i className=\"fa fa-thumbs-up\"></i>\n                </span>\n                <button className=\"btn btn-sm btn-outline-primary\" onClick={handleTweetDetailLink}>View</button>\n                <small className=\"float-right\">\n                    {tweet.timestamp}\n                </small>\n            </div>\n        </div>\n    )\n}\n\n\nexport const TweetList = (props) => {\n    const { tweetList, refetch, requestUserId } = props\n    const [like_mutate] = useMutation(apiGETMutate, {\n        onSuccess : refetch\n    });\n\n    const handleLike = async (tweet_id) => {\n        const endpoint = `tweets/${tweet_id}/like/`;\n        try {\n            await like_mutate({ endpoint });\n        } catch (error) {\n            console.log('tweet like error');\n        }\n    }\n\n    const tweetListDiv = tweetList.map(tweet => (\n        <TweetItem key={tweet.id} tweet={tweet} handleLike={handleLike} requestUserId={requestUserId}/>\n    ))\n    return (\n        <div className=\"\">\n            { tweetListDiv }\n        </div>\n    )\n\n}","import React from 'react';\nimport { useQuery, useMutation } from 'react-query';\n\nimport { apiGETQuery, apiGETMutate } from '../../api/queryLookup';\n\nexport const TweetDetail = (props) => {\n    const { requestUserId, tweetId } = props //get from django\n    const { data: tweet, refetch, status} = useQuery(['tweetItem', `tweets/${tweetId}/`], apiGETQuery);\n    \n    const [like_mutate] = useMutation(apiGETMutate, {\n        onSuccess : refetch\n    });\n\n    const handleLike = async (tweetId) => {\n        const endpoint = `tweets/${tweetId}/like/`;\n        try {\n            await like_mutate({ endpoint });\n        } catch (error) {\n            console.log('tweet like error');\n        }\n    }\n    \n    const handleUserProfileLink = (username) => {\n        window.location.href = `/${username}`\n    }\n    \n    if(status===\"loading\"){\n        return (\n            <div className=\"text-center\">\n                <h1>Loading</h1>\n            </div>\n        )\n    }\n\n    if(status===\"error\"){\n        return (\n            <div className=\"text-center\">\n                <h1>Error. Try Again</h1>\n            </div>\n        )\n    }\n\n    if(status===\"success\"){\n        if(tweet.error_message==='not found'){\n            return (\n                <div className=\"text-center\">\n                    <h1>Error 404 : Not Found</h1>\n                </div>\n            )\n        }\n\n        const liked = tweet.liked_by.includes(parseInt(requestUserId, 10));\n        let btnClasses = 'h5 text-secondary';\n        if(liked){\n            btnClasses = 'h5 text-primary';\n        }\n        return (\n            <div className=\"card mb-4\">\n                <div className=\"card-header clickable\" onClick={() => handleUserProfileLink(tweet.author.username)}>\n                    { tweet.author.username }\n                </div>\n                <div className=\"card-body\">\n                    <p className=\"card-text\">{tweet.content}</p>\n\n                    <span className=\"mr-2\">{`${tweet.liked_by.length}`}</span>\n                    <span \n                        className={`${btnClasses} mr-2 clickable`} \n                        onClick={() => handleLike(tweet.id) }\n                    >\n                        <i className=\"fa fa-thumbs-up\"></i>\n                    </span>\n                    <small className=\"float-right\">\n                        {tweet.timestamp}\n                    </small>\n                </div>\n            </div>\n        )\n    }\n}\n","import React from 'react';\nimport { useMutation } from 'react-query';\n\nimport { apiGETMutate } from '../../api/queryLookup';\n\nexport const UserProfile = (props) => {\n    const { handleProfileSidebarLink, userProfile, requestUserId,userProfileRefetch } = props;\n    const [follow_mutate] = useMutation(apiGETMutate, {\n        onSuccess: () => {\n            userProfileRefetch()\n        }\n    })\n\n    const handleFollow = async ( username ) => {\n        const endpoint = `accounts/${username}/follow/`;\n        await follow_mutate({ endpoint })\n    }\n\n\n    let btnClasses = 'btn-primary';\n    let value = 'Follow'\n    if(userProfile.user.id===parseInt(requestUserId, 10)){\n        btnClasses = 'd-none'\n    }else{\n        const followed = userProfile.followers.includes(parseInt(requestUserId, 10));\n        if(followed){\n            btnClasses = 'btn-danger';\n            value = 'Unfollow';\n        }\n    }\n\n    return (\n        <div className=\"profile\">\n            <div className=\"profile-header\">\n                <div className=\"profile-usertitle\">\n                    <div className=\"profile-user-full-name\">\n                        {`${userProfile.user.first_name} ${userProfile.user.last_name}`}\n                    </div>\n                    <div className=\"profile-user-username\">\n                        {`@${userProfile.user.username}`}\n                    </div>\n                </div>\n                <div className=\"profile-userbuttons\">\n                    <button \n                        className={`btn btn-sm ${btnClasses}`}\n                        onClick={() => handleFollow(userProfile.user.username)}\n                    >\n                        {`${value}`}\n                    </button>\n                </div>\n                <div className=\"profile-user-bio\">\n                    {`${userProfile.bio}`}\n                </div>\n            </div>\n            <div className=\"profile-usermenu\">\n                <ul>\n                    <li id=\"profile-tweets-list\" className=\"active\" onClick={() => handleProfileSidebarLink('tweets')}>                 \n                        {`Tweets (${userProfile.tweet_count})`}\n                    </li>\n                    <li id=\"profile-followers-list\" onClick={() => handleProfileSidebarLink('followers')}>\n                        {`Followers (${userProfile.follower_count})`}\n                    </li>\n                    <li id=\"profile-following-list\" onClick={() => handleProfileSidebarLink('following')}>                 \n                        {`Following (${userProfile.following_count})`}\n                    </li>\n                </ul>\n            </div>\n        </div>\n    )\n}\n","import React from \"react\";\n\nexport const ScrollComponent = (props) => {\n    return (\n        <div className=\"scroller\">\n            { props.children }\n        </div>\n    )\n}\n","import React from 'react';\nimport { useQuery } from 'react-query';\n\nimport { apiGETQuery } from '../../api/queryLookup'\nimport { TweetList } from '../tweets/list';\n\nexport const UserTweetList = (props) => {\n    const { profileUsername, requestUserId } = props;\n    const {data: userTweets, status, refetch} = useQuery(['userTweetList', `accounts/${profileUsername}/tweets/`], apiGETQuery);\n    \n    if(status===\"loading\"){\n        return (\n            <div className=\"text-center\">\n                <h1>Loading</h1>\n            </div>\n        )\n    }\n\n    if(status===\"error\"){\n        return (\n            <div className=\"text-center\">\n                <h1>Error. Try Again</h1>\n            </div>\n        )\n    }\n\n    if(status===\"success\"){\n\n        if(userTweets.error_message==='not found'){\n            return (\n                <div className=\"text-center\">\n                    <h1>Error 404 : Not Found</h1>\n                </div>\n            )\n        }\n        return (\n            <TweetList tweetList={userTweets} refetch={refetch} requestUserId={requestUserId}/>\n        )\n    }\n}","import React from 'react';\nimport { useMutation } from 'react-query';\n\nimport { apiGETMutate } from '../../api/queryLookup';\n\nexport const UserProfileItem = (props) => {\n    const { profile, requestUserId, refetch, userProfileRefetch } = props;\n    const [follow_mutate] = useMutation(apiGETMutate, {\n        onSuccess: () => {\n            refetch()\n            userProfileRefetch()\n        }\n    })\n\n    const handleFollow = async ( username ) => {\n        const endpoint = `accounts/${username}/follow/`;\n        await follow_mutate({ endpoint })\n    }\n\n    let btnClasses = 'btn-primary';\n    let value = 'Follow'\n    if(profile.user.id===parseInt(requestUserId, 10)){\n        btnClasses = 'd-none'\n    }else{\n        const followed = profile.followers.includes(parseInt(requestUserId, 10));\n        if(followed){\n            btnClasses = 'btn-danger';\n            value = 'Unfollow';\n        }\n    }\n\n    return (\n        <div className=\"profile-card mb-3\">\n            <div className=\"profile-card-header\">\n                <div className=\"profile-card-usertitle\">\n                    <div className=\"profile-card-user-full-name\">\n                        {`${profile.user.first_name} ${profile.user.last_name}`}\n                    </div>\n                    <div className=\"profile-card-user-username\">\n                        {`@${profile.user.username}`}\n                    </div>\n                </div>\n                <button \n                    className={`profile-card-userbutton btn ${btnClasses}`}\n                    onClick={() => handleFollow(profile.user.username)}\n                >\n                    {`${value}`}\n                </button>\n            </div>\n            <div className=\"profile-card-user-bio\">\n                {`${profile.bio}`}\n            </div>\n        </div>\n    )\n}\n","import React from 'react';\nimport { useQuery } from 'react-query';\n\nimport { apiGETQuery } from '../../api/queryLookup';\nimport { UserProfileItem } from './usercard';\n\nconst UserProfileList = (props) => {\n    const { userProfileList, requestUserId, refetch, userProfileRefetch } = props;\n    const profileListDiv = userProfileList.map(profile => (\n        <UserProfileItem key={profile.id} profile={profile} requestUserId={requestUserId} refetch={refetch} userProfileRefetch={userProfileRefetch} />\n    ))\n    return (\n        <>\n            { profileListDiv }\n        </>\n    )\n}\n\nexport const FollowerList = (props) => {\n    const { profileUsername, requestUserId, userProfileRefetch } = props;\n    const { data: followers, status, refetch} = useQuery(['followerList', `accounts/${profileUsername}/followers/`], apiGETQuery);\n\n    if(status===\"loading\"){\n        return (\n            <div className=\"text-center\">\n                <h1>Loading</h1>\n            </div>\n        )\n    }\n\n    if(status===\"error\"){\n        return (\n            <div className=\"text-center\">\n                <h1>Error. Try Again</h1>\n            </div>\n        )\n    }\n\n    if(status===\"success\"){\n        if(followers.error_message==='not found'){\n            return (\n                <div className=\"text-center\">\n                    <h1>Error 404 : Not Found</h1>\n                </div>\n            )\n        }\n        return (\n            <UserProfileList userProfileList={followers} requestUserId={requestUserId} refetch={refetch} userProfileRefetch={userProfileRefetch} />\n        )\n    }\n}\n\n\nexport const FollowingList = (props) => {\n    const { profileUsername, requestUserId, userProfileRefetch } = props;\n    const { data: following, status, refetch} = useQuery(['followingList', `accounts/${profileUsername}/following/`], apiGETQuery);\n\n    if(status===\"loading\"){\n        return (\n            <div className=\"text-center\">\n                <h1>Loading</h1>\n            </div>\n        )\n    }\n\n    if(status===\"error\"){\n        return (\n            <div className=\"text-center\">\n                <h1>Error. Try Again</h1>\n            </div>\n        )\n    }\n\n    if(status===\"success\"){\n        return (\n            <UserProfileList userProfileList={following} requestUserId={requestUserId} refetch={refetch} userProfileRefetch={userProfileRefetch} />\n        )\n    }\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n// import App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nimport { TweetListComponent } from './components/tweets/components'\nimport { TweetDetailComponent } from './components/tweets/components';\nimport { UserProfileComponent } from './components/accounts/components';\n\n// ReactDOM.render(\n// \t<React.StrictMode>\n// \t\t<App />\n// \t</React.StrictMode>,\n// \tdocument.getElementById('root')\n// );\n\nconst tweetListDiv = document.getElementById('tweet-list');\nif(tweetListDiv){\n\tconst TweetListElement = React.createElement(TweetListComponent, tweetListDiv.dataset)\n\tReactDOM.render(TweetListElement, tweetListDiv)\n}\n\nconst tweetDetailDiv = document.getElementById('tweet-detail');\nif(tweetDetailDiv){\n\tconst TweetDetailElement = React.createElement(TweetDetailComponent, tweetDetailDiv.dataset)\n\tReactDOM.render(TweetDetailElement, tweetDetailDiv)\n}\n\nconst userProfileDiv = document.getElementById('user-profile');\nif(userProfileDiv){\n\tconst UserProfileElement = React.createElement(UserProfileComponent, userProfileDiv.dataset)\n\tReactDOM.render(UserProfileElement, userProfileDiv)\n}\n\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import React from 'react';\nimport { useQuery, useMutation } from 'react-query';\n\nimport { apiGETQuery, apiPOSTMutate } from '../../api/queryLookup';\nimport { TweetCreate } from './create';\nimport { TweetList } from './list';\nimport { TweetDetail } from './detail';\n\nexport const TweetListComponent = (props) => {\n    const { requestUserId } = props;\n    const { data : tweetList, status, refetch } = useQuery(['tweetListState', 'tweets/'], apiGETQuery);\n\n    const [create_mutate] = useMutation(apiPOSTMutate, {\n        onSuccess : refetch\n    });\n\n    const handleTweetCreate = async (content) => {\n        const endpoint = `tweets/create/`;\n        const newTweet = {\n            'content' : content\n        }\n        try {\n            await create_mutate({ endpoint, payload: newTweet })\n        } catch (error) {\n            console.log('tweet create error');\n        }\n    }\n\n\n    if(status===\"loading\"){\n        return (\n            <div className=\"text-center\">\n                <h1>Loading</h1>\n            </div>\n        )\n    }\n\n    if(status===\"error\"){\n        return (\n            <div className=\"text-center\">\n                <h1>Error. Try Again</h1>\n            </div>\n        )\n    }\n\n    if(status===\"success\"){\n        if(tweetList.error_message==='not found'){\n            return (\n                <div className=\"text-center\">\n                    <h1>Error 404 : Not Found</h1>\n                </div>\n            )\n        }\n        return (\n            <div className=\"col-12 col-md-5 offset-md-2\">\n                <>\n                    {/* form to create tweet */}\n                    { \n                        (requestUserId) && \n                        <TweetCreate handleTweetCreate={handleTweetCreate}/>\n                    }\n\n                </>\n                <>\n                    <TweetList tweetList={tweetList} refetch={refetch} {...props}/>\n                </>\n            </div>\n        )\n    }\n}\n\nexport const TweetDetailComponent = (props) => {\n    return (\n        <div className=\"col-12 col-md-5 offset-md-2\">\n            <TweetDetail {...props}/>    \n        </div>\n    )\n}","import React, { useState } from 'react';\n\nimport { useQuery } from 'react-query';\n\nimport { apiGETQuery } from '../../api/queryLookup';\nimport { UserProfile } from './profile';\nimport { ScrollComponent } from '../layout/scroll';\nimport { UserTweetList } from './userTweets';\nimport { FollowerList, FollowingList  } from './userList';\n\nexport const UserProfileComponent = (props) => {\n    const { profileUsername, requestUserId } = props\n    const {data: userProfile, status, refetch: userProfileRefetch} = useQuery(['userDetailState', `accounts/${profileUsername}/`], apiGETQuery);\n\n    const [content, setContent] = useState('tweets');\n    const listItems = ['tweets', 'followers', 'following'];\n\n    const handleProfileSidebarLink = (value) => {\n        setContent(value);\n        listItems.forEach(i => {\n            const temp = document.getElementById(`profile-${i}-list`);\n            temp.classList.remove('active');\n        })\n        const item = document.getElementById(`profile-${value}-list`);\n        item.classList.add('active');\n        \n    }\n\n\n    if(status===\"loading\"){\n        return (\n            <div className=\"text-center\">\n                <h1>Loading</h1>\n            </div>\n        )\n    }\n\n    if(status===\"error\"){\n        return (\n            <div className=\"text-center\">\n                <h1>Error. Try Again</h1>\n            </div>\n        )\n    }\n\n\n    if(status===\"success\"){\n        if(userProfile.error_message==='not found'){\n            return (\n                <div className=\"text-center\">\n                    <h1>Error 404 : Not Found</h1>\n                </div>\n            )\n        }\n        return (\n            <div className=\"container-fluid\">\n                <div className=\"row\">\n                    <div className=\"fixed-div\">\n                        <ScrollComponent>\n                            <UserProfile userProfile={userProfile}  handleProfileSidebarLink={handleProfileSidebarLink} requestUserId={requestUserId} userProfileRefetch={userProfileRefetch}/>\n                        </ScrollComponent>\n                    </div>\n                    <div className=\"col-10 col-md-6 mx-auto mt-5\">\n\n                        { content==='tweets' && <UserTweetList profileUsername={profileUsername} requestUserId={requestUserId}/> }\n\n                        { content==='followers' && <FollowerList profileUsername={profileUsername} requestUserId={requestUserId} userProfileRefetch={userProfileRefetch} /> }\n                        \n                        { content==='following' && <FollowingList profileUsername={profileUsername} requestUserId={requestUserId} userProfileRefetch={userProfileRefetch} /> }\n                    </div>\n                </div>\n            </div>\n        )\n    }\n}\n\n// export const TweetDetailComponent = (props) => {\n//     return (\n//         <div className=\"col-12 col-md-5 offset-md-2\">\n//             <TweetDetail {...props}/>    \n//         </div>\n//     )\n// }"],"sourceRoot":""}